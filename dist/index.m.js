import loaderUtils from"loader-utils";import{createPlugin}from"docz-core";import MiniCssExtractPlugin from"mini-css-extract-plugin";import OptimizeCSSAssetsPlugin from"optimize-css-assets-webpack-plugin";import merge from"deepmerge";const getLocalIdent=(s,e,t,r)=>{const o=s.resourcePath.match(/index\.module\.(css|scss|sass)$/)?"[folder]":"[name]",l=loaderUtils.getHashDigest(s.resourcePath+t,"md5","base64",5);return loaderUtils.interpolateName(s,o+"_"+t+"__"+l,r).replace(".module_","_")},tests={postcss:/(\.module)?\.css$/,sass:/(\.module)?\.s(a|c)ss$/,less:/(\.module)?\.less$/,stylus:/(\.module)?\.styl(us)?$/},getStyleLoaders=(s,e)=>(t,r)=>[{loader:r?require.resolve("style-loader"):MiniCssExtractPlugin.loader},{loader:require.resolve("css-loader"),options:t},{loader:s,options:e}],loaders={postcss:(s={plugins:[]})=>getStyleLoaders(require.resolve("postcss-loader"),merge(s,{plugins:()=>{const e=[require("postcss-flexbugs-fixes"),require("autoprefixer")({flexbox:"no-2009"})];return s&&s.plugins&&Array.isArray(s.plugins)?s.plugins.concat(e):e}})),sass:(s={})=>getStyleLoaders(require.resolve("sass-loader"),merge(s,{indentedSyntax:!1})),less:(s={})=>getStyleLoaders(require.resolve("less-loader"),s),stylus:(s={})=>getStyleLoaders(require.resolve("stylus-loader"),merge(s,{preferPathResolver:"webpack"}))},applyRule=(s,e,t)=>{const{preprocessor:r,cssOpts:o,loaderOpts:l,ruleOpts:i}=s,a=(0,loaders[r])(l),n=merge(o,Object.assign({importLoaders:1,modules:e,sourceMap:!t},e&&{getLocalIdent:getLocalIdent}));return Object.assign({test:tests[r],use:a(n,t)},i)},defaultOpts={preprocessor:"postcss",cssmodules:!1,loadersOpts:{},cssOpts:{},ruleOpts:{}},css=(s=defaultOpts)=>createPlugin({modifyBundlerConfig:(e,t)=>{if(e.module.rules.push(applyRule(s,s.cssmodules,t)),!t){const t=tests[s.preprocessor||"postcss"],r=e.optimization.minimizer||[],o=Object.assign({},e.optimization.splitChunks);e.optimization.minimizer=r.concat([new OptimizeCSSAssetsPlugin({})]),e.optimization.splitChunks=merge(o,{cacheGroups:{styles:{test:s=>t.test(s.type),name:"styles",chunks:"all",enforce:!0}}}),e.plugins.push(new MiniCssExtractPlugin({filename:"static/css/[name].[hash].css"}))}return e}});export{css};
