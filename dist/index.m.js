import loaderUtils from"loader-utils";import{createPlugin}from"docz-core";import MiniCssExtractPlugin from"mini-css-extract-plugin";import OptimizeCSSAssetsPlugin from"optimize-css-assets-webpack-plugin";import merge from"deepmerge";const getLocalIdent=(e,s,t,r)=>{const o=e.resourcePath.match(/index\.module\.(css|scss|sass)$/)?"[folder]":"[name]",l=loaderUtils.getHashDigest(e.resourcePath+t,"md5","base64",5);return loaderUtils.interpolateName(e,o+"_"+t+"__"+l,r).replace(".module_","_")},tests={default:/(\.module)?\.css$/,sass:/(\.module)?\.s(a|c)ss$/,less:/(\.module)?\.less$/,stylus:/(\.module)?\.styl(us)?$/},getStyleLoaders=(e,s={})=>(t,r,o)=>{const l=[{loader:o?require.resolve("style-loader"):MiniCssExtractPlugin.loader},{loader:require.resolve("css-loader"),options:t},{loader:require.resolve("postcss-loader"),options:r}];return e&&l.push({loader:e,options:s}),l},loaders={default:(e={plugins:[]})=>getStyleLoaders(),sass:(e={})=>getStyleLoaders(require.resolve("sass-loader"),merge(e,{indentedSyntax:!1})),less:(e={})=>getStyleLoaders(require.resolve("less-loader"),e),stylus:(e={})=>getStyleLoaders(require.resolve("stylus-loader"),merge(e,{preferPathResolver:"webpack"}))},applyRule=(e,s,t)=>{const{preprocessor:r,cssOpts:o,postcssOpts:l,loaderOpts:i,ruleOpts:a}=e,u=(0,loaders[r])(i),n=merge(o,Object.assign({importLoaders:1,modules:s,sourceMap:!t},s&&{getLocalIdent:getLocalIdent})),p=merge(l,{plugins:e=>{let s=[require("postcss-flexbugs-fixes"),require("autoprefixer")({flexbox:"no-2009"})];return l&&l.plugins&&("[object Function]"===Object.prototype.toString.call(l.plugins)&&(l.plugins=l.plugins(e)),Array.isArray(l.plugins)&&(s=l.plugins.concat(s))),s}});return Object.assign({test:tests[r],use:u(n,p,t)},a)},defaultOpts={preprocessor:"default",cssmodules:!1,loadersOpts:{},cssOpts:{},ruleOpts:{}},css=(e=defaultOpts)=>createPlugin({modifyBundlerConfig:(s,t)=>{if(s.module.rules.push(applyRule(e,e.cssmodules,t)),!t){const t=tests[e.preprocessor||"default"],r=s.optimization.minimizer||[],o=Object.assign({},s.optimization.splitChunks);s.optimization.minimizer=r.concat([new OptimizeCSSAssetsPlugin({})]),s.optimization.splitChunks=merge(o,{cacheGroups:{styles:{test:e=>t.test(e.type),name:"styles",chunks:"all",enforce:!0}}}),s.plugins.push(new MiniCssExtractPlugin({filename:"static/css/[name].[hash].css"}))}return s}});export{css};
