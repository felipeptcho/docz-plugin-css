"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var loaderUtils=_interopDefault(require("loader-utils")),doczCore=require("docz-core"),MiniCssExtractPlugin=_interopDefault(require("mini-css-extract-plugin")),OptimizeCSSAssetsPlugin=_interopDefault(require("optimize-css-assets-webpack-plugin")),merge=_interopDefault(require("deepmerge"));const getLocalIdent=(e,s,t,r)=>{const l=e.resourcePath.match(/index\.module\.(css|scss|sass)$/)?"[folder]":"[name]",o=loaderUtils.getHashDigest(e.resourcePath+t,"md5","base64",5);return loaderUtils.interpolateName(e,l+"_"+t+"__"+o,r).replace(".module_","_")},tests={default:/(\.module)?\.css$/,sass:/(\.module)?\.s(a|c)ss$/,less:/(\.module)?\.less$/,stylus:/(\.module)?\.styl(us)?$/},getStyleLoaders=(e,s={})=>(t,r,l)=>{const o=[{loader:l?require.resolve("style-loader"):MiniCssExtractPlugin.loader},{loader:require.resolve("css-loader"),options:t},{loader:require.resolve("postcss-loader"),options:r}];return e&&o.push({loader:e,options:s}),o},loaders={default:(e={plugins:[]})=>getStyleLoaders(),sass:(e={})=>getStyleLoaders(require.resolve("sass-loader"),merge(e,{indentedSyntax:!1})),less:(e={})=>getStyleLoaders(require.resolve("less-loader"),e),stylus:(e={})=>getStyleLoaders(require.resolve("stylus-loader"),merge(e,{preferPathResolver:"webpack"}))},applyRule=(e,s,t)=>{const{preprocessor:r,cssOpts:l,postcssOpts:o,loaderOpts:i,ruleOpts:a}=e,u=(0,loaders[r])(i),n=merge(l,Object.assign({importLoaders:1,modules:s,sourceMap:!t},s&&{getLocalIdent:getLocalIdent})),p=merge(o,{plugins:e=>{let s=[require("postcss-flexbugs-fixes"),require("autoprefixer")({flexbox:"no-2009"})];return o&&o.plugins&&("[object Function]"===Object.prototype.toString.call(o.plugins)&&(o.plugins=o.plugins(e)),Array.isArray(o.plugins)&&(s=o.plugins.concat(s))),s}});return Object.assign({test:tests[r],use:u(n,p,t)},a)},defaultOpts={preprocessor:"default",cssmodules:!1,loadersOpts:{},cssOpts:{},ruleOpts:{}},css=(e=defaultOpts)=>doczCore.createPlugin({modifyBundlerConfig:(s,t)=>{if(s.module.rules.push(applyRule(e,e.cssmodules,t)),!t){const t=tests[e.preprocessor||"default"],r=s.optimization.minimizer||[],l=Object.assign({},s.optimization.splitChunks);s.optimization.minimizer=r.concat([new OptimizeCSSAssetsPlugin({})]),s.optimization.splitChunks=merge(l,{cacheGroups:{styles:{test:e=>t.test(e.type),name:"styles",chunks:"all",enforce:!0}}}),s.plugins.push(new MiniCssExtractPlugin({filename:"static/css/[name].[hash].css"}))}return s}});exports.css=css;
